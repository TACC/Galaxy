//
// /Users/gda/galaxy.e/Galaxy/src/intel/EmbreePathLines_ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif

#ifndef __ISPC_STRUCT_EmbreeGeometry_ispc__
#define __ISPC_STRUCT_EmbreeGeometry_ispc__
struct EmbreeGeometry_ispc {
    int32_t nv;
    int32_t nc;
    struct vec3f * vertices;
    struct vec3f * normals;
    int32_t * connectivity;
    float * data;
    void ( * computeNormal)(struct EmbreeGeometry_ispc * __anon_parameter_0, void * rayhit);
};
#endif

#ifndef __ISPC_STRUCT_EmbreePathLines_ispc__
#define __ISPC_STRUCT_EmbreePathLines_ispc__
struct EmbreePathLines_ispc {
    struct EmbreeGeometry_ispc super;
    float epsilon;
    float radius0;
    float radius1;
    float value0;
    float value1;
    int32_t nvc;
    float * vertexCurve;
    int32_t ni;
    int32_t * indexCurve;
};
#endif

#ifndef __ISPC_STRUCT_vec3f__
#define __ISPC_STRUCT_vec3f__
struct vec3f {
    float x;
    float y;
    float z;
};
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void EmbreePathLines_dummy(struct EmbreePathLines_ispc * esi);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
